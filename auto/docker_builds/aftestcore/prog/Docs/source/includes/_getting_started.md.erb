# Getting started

This tutorial is a guide that will walk you through the process of setting up you own algorithm / application on our platform - AlgoFab.

As the point of this getting started is to give you pointer on how to use the platform, we will show the process from creating an algorithm to testing it for a very easy-to-understand algorithm : HelloWorld.

Through this tutorial we will references very important entries to other sections of the documentation that details more. Therefore although HelloWorld is a very basic algorithm, you can always find further explanations to match your particular use case. If still can't find any satisfactory answer for your problems, please visit our [FAQ](#) you might just find the answer you are looking for.

If you are new to Algofab we Highly recommend you to read the Getting Started carefully.

**Prerequisites**

Before you continue, make sure you are comfortable with the following technologies :

* A programming Language (Any language : C, Java, Python …) : you'll need this skill to develop your algorithm.
* A REST / HTTP Server programming language (such as Php, Nodejs ...)
* Docker : Containerization technology to package the different pieces of your algorithm
* Kubernetes : To deploy your algorithm as a micro-service on our Kubernetes cluster.


<aside class="notice">
	The work we will describe here should be done by the user in his own working environment with respect to Algofab contraints. By doing so, whenever there is an error he can be sure the problem might be from the platform and not from his algorithm.
</aside>


<aside class="notice">
	Thoughout the tutorial we will use the terms <em>algorithm</em> and <em>application</em> interchangeably so you should keep that in mind from now on.
</aside>


Now without further ado let's get started!


## Create an application

```bash

#!/bin/bash
for i in "$@"
do
	case $i in
		-f=*|--firstname=*)
		FIRSTNAME="${i#*=}"
		shift # past argument=value
		;;
		-l=*|--lastname=*)
		LASTNAME="${i#*=}"
		shift # past argument=value
		;;
		-t=*|--daytime=*)
		DAYTIME="${i#*=}"
		shift # past argument=value
		;;
		*)
		# unknown option
		;;
	esac
done

if [ "$FIRSTNAME" == "" ] && [ "$LASTNAME" == "" ]; then
	echo "Error : At least one name required"
elif [ "$DAYTIME" != "" ]; then

	#echo "daytime : $DAYTIME"
	SHOW="Good $DAYTIME"
	if [ "$FIRSTNAME" == "" ]; then
		SHOW="$SHOW $LASTNAME."
	elif [ "$LASTNAME" == "" ]; then
                SHOW="$SHOW $FIRSTNAME."
	else
		SHOW="$SHOW $FIRSTNAME $LASTNAME."
	fi

	echo $SHOW

else
	SHOW="Hello"
	if [ "$FIRSTNAME" == "" ]; then
		SHOW="$SHOW $LASTNAME."
	elif [ "$LASTNAME" == "" ]; then
		SHOW="$SHOW $FIRSTNAME."
	else
		SHOW="$SHOW $FIRSTNAME $LASTNAME."
	fi
	echo $SHOW
fi

```

The very first step to using AlgoFab platform is to make sure you have an algorithm at your disposal ready to be deployed.

We will assume this is not you case and create a very simple SHELL script as our HelloWorld application. 
You can write your application in any programming language you like. The reason for that is because the interactions in Algofab are done through REST APIs. You just need to make sure afterwards that you API server uses well you algorithm.

Create a file named "hello.sh" and put inside the code shown in the API section of the documentation. 

The script basically greet someone based on his name and the time of the day. It has the following entries :
* FIRSTNAME : the firstname of the person to greet. This parameter is not required if LASTNAME is already specified.
* LASTNAME : the lastname of the person to greet. This parameter is not required if LASTNAME is already specified.
* DAYTIME : the time of the day. This parameter is optional but if specified has to be either **morning**, **evening** or **night**


_**Remark** : Either FIRSTNAME or LASTNAME have have to be specified (even better if they both are), if both are missing the algorithm outputs an error message._

The script has two typical outputs : 
* When DAYTIME is specified : "Good $DAYTIME $FISTNAME $LASTNAME"
* Otherwise : "Hello $FISTNAME $LASTNAME"

_**Remark** : In both cases if either FISTNAME or LASTNAME is missing, then the one missing will obviously not appear in the response._

We put the algorithm on github, you clone this repo git : [https://github.com/skante93/Algofab-HelloWorld.git](https://github.com/skante93/Algofab-HelloWorld.git)

_**Remark** : To test the script, move to folder **Hello-World** and execute the **hello.sh** script. The flags **-firstname=** or *-f=* can be used to specify the firstname, **—lastname=** or **-l=** for the lastname and **--daytime=** or -t for the daytime._

The next step is to create a REST API that will encapsulate this algorithm and allow distant users to call for it. 


## Create a REST API

In the last part of the tutorial we created an application, in this part we will create a REST API to allow for distant users to use our HelloWorld as an HTTP resource.

We will use NodeJS with its module “Express” to create an HTTP Server wrapped around “hello.sh” script to handle all incoming execution requests. Here again it is not important which technology you use, just make sure that at the end an HTTP client can use your algorithm just as expected.

Let's first start by reviewing the generalities and constraints we are submitted to when designing an API on Algofab : 
<aside class="notice">
	When developing your algorithm there is one thing you should keep in mind and that is the modes of accessing your algorithm by the users : demonstration mode and API mode. The demonstration or presentation mode is the mode where you present your algorithm to users in order to prove them its effeciency. This will be the mode thorough which the users will consult your algorithm on Algofab's portal. On the other hand the API mode is when other users - by using HTTP clients - task your algorithm with some job in order to use the output in their own applications. 
</aside>

<aside class="notice">
	Algofab suposes that your algorithm has only one entry point and by this link we can acces all of the services your algorithm proposes. More will be said about that when we get to the kubernetes part but keep in mind that you can't have two servers (one for demonstration and the other for execution) - belonging to same algorithm's infrastructure - exchanging outside the Algofab platform.	
</aside>

<aside class="notice">
	We came up with a solution to creating an API serving both modes we suggest other users to adapt to is : a query parameter named <b>"outformat"</b>. That parameter would be HTML in demonstration mode (graphical) or a specific encoded type (JSON, XML, YAML ...) in execution mode (user can parse the response and work with in his own application). The major reason we suggest you work this way is because algofab makes the assumption that whenever we send <b>"GET /"</b> to the API of your Algorithm, we get its demo. 
</aside>

**You can ignore these recommendations but the reason they exist is to make it possible for you to showcase your algorithm in addition to give an actual service.**

Back to the topic, let’s start by visualizing the API we want the server to work according to. The tables 1 and 2 represent our views of the application. 

<aside style="background: none;">
	<div class="notice" style="overflow-x: scroll;">
		<table class="table table-bordered api-table">
	      	<thead>
	        	<tr>
	              	<th colspan="8" style="text-align: center; border: black solid 1px;"> URI : / </th>
	            </tr>
	            <tr>
	              	<th rowspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> Verb </th>
	              	<th colspan="2" style="text-align: center; border: black solid 1px;"> Query </th>
	              	<th colspan="2" style="text-align: center; border: black solid 1px;"> Body </th>
	              	<th rowspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> Invocation </th>
	              	<th colspan="2" style="text-align: center; border: black solid 1px;"> Response </th>
	            </tr>
				<tr>
	              	<th style="text-align: center; border: black solid 1px;"> Name </th>
	              	<th style="text-align: center; border: black solid 1px;"> Importance </th>
	              	<th style="text-align: center; border: black solid 1px;"> Name </th>
	              	<th style="text-align: center; border: black solid 1px;"> Importance </th>
	              	<th style="text-align: center; border: black solid 1px;"> Type </th>
	              	<th style="text-align: center; border: black solid 1px;"> Content </th>
	            </tr>
	      	</thead>
	      	<tbody>
	      		<tr>
	              	<td rowspan="3" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> GET </td>
	              	<td style="text-align: center; border: black solid 1px;"> firstname </td>
	              	<td style="text-align: center; border: black solid 1px;"> required </td>
	              	<td rowspan="3" colspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> X </td>
	              	<td rowspan="6" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> bash hello.sh -f=firsnatme -l=lastname </td>
	              	<td rowspan="6" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> application/{outformat} </td>
					<td rowspan="6" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> “Hello {firstname} {lastname}” </td>
	            </tr>
	      		<tr>
	              	<td style="text-align: center; border: black solid 1px;"> lastname </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	            </tr>
	            <tr>
	              	<td style="text-align: center; border: black solid 1px;"> outformat </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	            </tr>
	      		<!-- POST -->
	      		<tr>
	              	<td rowspan="3" style="text-align: center; border: black solid 1px; display: table-cell; vertical-align: middle;"> POST </td>
	              	<td rowspan="2" colspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> X </td>
	              	<td style="text-align: center; border: black solid 1px;"> firstname </td>
	              	<td style="text-align: center; border: black solid 1px;"> required </td>	              	
	            </tr>
	      		<tr>
	              	<td style="text-align: center; border: black solid 1px;"> lastname </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	            </tr>
	            <tr>
	              	<td style="text-align: center; border: black solid 1px;"> outformat </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	              	<td colspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> X </td>
	            </tr>
	      	</tbody>
	    </table>
	<!--
	GET 	firstname 	required 	X 	bash hello.sh -f=firsnatme -l=lastname 	application/{outformat} 	“Hello {firstname} {lastname}”
	lastname 	optional
	outformat 	optional
	POST 	X 	firstname 	required
	lastname 	optional
	outformat 	optional 	X
	Tab 1 : REST API for URI "/" 
	-->
	</div>
</aside>
<aside style="background: none;">
	<div style="text-align: center;">
		Table 1 : Server's response when DAYTIME is not specified.
	</div>
</aside>



<aside style="background: none;">
	<div class="notice" style="overflow-x: scroll;">
		<table class="table table-bordered api-table">
	      	<thead>
	        	<tr>
	              	<th colspan="8" style="text-align: center; border: black solid 1px;"> URI : /{daytime} </th>
	            </tr>
	            <tr>
	              	<th rowspan="2" style="text-align: center; border: black solid 1px;"> Verb </th>
	              	<th colspan="2" style="text-align: center; border: black solid 1px;"> Query </th>
	              	<th colspan="2" style="text-align: center; border: black solid 1px;"> Body </th>
	              	<th rowspan="2" style="text-align: center; border: black solid 1px;"> Invocation </th>
	              	<th colspan="2" style="text-align: center; border: black solid 1px;"> Response </th>
	            </tr>
				<tr>
	              	<th style="text-align: center; border: black solid 1px;"> Name </th>
	              	<th style="text-align: center; border: black solid 1px;"> Importance </th>
	              	<th style="text-align: center; border: black solid 1px;"> Name </th>
	              	<th style="text-align: center; border: black solid 1px;"> Importance </th>
	              	<th style="text-align: center; border: black solid 1px;"> Type </th>
	              	<th style="text-align: center; border: black solid 1px;"> Content </th>
	            </tr>
	      	</thead>
	      	<tbody>
	      		<tr>
	              	<td rowspan="3" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> GET </td>
	              	<td style="text-align: center; border: black solid 1px;"> firstname </td>
	              	<td style="text-align: center; border: black solid 1px;"> required </td>
	              	<td rowspan="3" colspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> X </td>
	              	<td rowspan="6" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> bash hello.sh -f=firsnatme -l=lastname -t=daytime </td>
	              	<td rowspan="6" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> application/{outformat} </td>
					<td rowspan="6" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> Good {daytime} {firstname} {lastname}” </td>
	            </tr>
	      		<tr>
	              	<td style="text-align: center; border: black solid 1px;"> lastname </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	            </tr>
	            <tr>
	              	<td style="text-align: center; border: black solid 1px;"> outformat </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	            </tr>
	      		<!-- POST -->
	      		<tr>
	              	<td rowspan="3" style="text-align: center; border: black solid 1px; display: table-cell; vertical-align: middle;"> POST </td>
	              	<td rowspan="2" colspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> X </td>
	              	<td style="text-align: center; border: black solid 1px;"> firstname </td>
	              	<td style="text-align: center; border: black solid 1px;"> required </td>	              	
	            </tr>
	      		<tr>
	              	<td style="text-align: center; border: black solid 1px;"> lastname </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	            </tr>
	            <tr>
	              	<td style="text-align: center; border: black solid 1px;"> outformat </td>
	              	<td style="text-align: center; border: black solid 1px;"> optional </td>
	              	<td colspan="2" style="text-align: center; border: black solid 1px;display: table-cell; vertical-align: middle;"> X </td>
	            </tr>
	      	</tbody>
	    </table>
	<!--
	GET 	firstname 	required 	X 	bash hello.sh -f=firsnatme -l=lastname 	application/{outformat} 	“Hello {firstname} {lastname}”
	lastname 	optional
	outformat 	optional
	POST 	X 	firstname 	required
	lastname 	optional
	outformat 	optional 	X
	Tab 1 : REST API for URI "/" 
	-->
	</div>
</aside>
<aside style="background: none;">
	<div style="text-align: center;">
		Table 2 : Server's response when DAYTIME is specified.
	</div>
</aside>

### Explanations

The two tables, Table 1 and Table 2, represent respectively the Server's response for when DAYTIME is specified and when it is not.

Here we chose to make the specification of DAYTIME thourgh the URL but we could have chosen to do it through Query parameters or Body parameters of both. 

The column Verbs refers to the HTTP method, Query refers to the query parameters of the request, Body is the body parameters of the request, Invocation is the way we call our algorithm (how we spawn the hello.sh) to get its response, Response type is the type of data (HTTP content-type) we return and Response content is the actual content we return.

Note that we made the firstname required but not lastname, that is a choice me made to make sure that at least one of the two is given before we call the algorithm. We decided to handle this error case from the API Server this way node need to fork a process just to return an error. In your case maybe you algorithm is more complex than that, then you will have to thorougly check the stdout and the stderr before you decide if everything went fine.

For the error cases, we list the following :

* **outformat** specified but not in [‘html’, ‘json’, ‘xml’] : we return status code 422 with : “The format of the response specified is not supported”
* FIRSTNAME is not specified : we return status code 422 with : FIRSTNAME is required”
* DAYTIME specified but not in [“morning”, ‘evening’, “night”] : we return status code 400 with : “daytime should either be ‘morning’, ‘evening’ or ‘night’”.

As for the HTTP method we just make sure to mirror the reasoning for GET (we look for query parameters) and POST (we look for body parameters) requests. 

We put the algorithm on github (same repository as the one pointed at the end of the last section), you clone this repo git : [https://github.com/skante93/Algofab-HelloWorld.git](https://github.com/skante93/Algofab-HelloWorld.git)

To test, move to the directory **Hello-World** and type `npm start` 

Have fun testing :) 

## Dockerize the application

> Content of the Dockerfile : 

```dockerfile
# Base image from which we construct our own
FROM ubuntu:16.04

# Update the image and install the tools we need
RUN apt-get update -y && apt-get install -y nodejs-legacy npm curl nano

# Create Hello-World folder in the Image and copy the contents from my OS to the Image
RUN mkdir /Hello-World-Package
COPY .  /Hello-World-Package

# Chane the current working directory
WORKDIR /Hello-World-Package/Hello-World

# Update nodejs version
RUN bash ../update-node.sh

# Command executed each time a container created from this image is started
CMD npm start

```

Now that we built our Algorithm and our API Server, let’s package the result into an image.

If you are not familiar with Docker we suggest you read the [documentation](https://docs.docker.com/) before you continue.

Let’s start by creating a Dockerfile. The content of the Dockerfile we will use to create the image of our application is in the API section.

No further explanation is required as the comments explain what we are doing. If you need a reminder take a look at the [Dockerfile reference](https://docs.docker.com/engine/reference/builder/).

In order for the commands to come to work, you need to make sure that your Docker file and the folder "Hello-World" (API Server) are in the same directory. If cloned the github repo of the last sections of the tutorial, just get into the base directory and you are set.

We now need to build this image while tagging it in order to push it to docker's registry. To create an image type the following : `sudo docker build -t &lt;Your DockerHub Login&gt;/helloworld .` (don't omit the **.**) where &lt;Your DockerHub Login&gt; is your Docker hub username.

You can make sure the image was successfully built by typing : `sudo docker images`. You sould an image named **&lt;Your DockerHub Login&gt;/helloworld**.

Finally to push the image to Docker's registry you need to first login (type : `sudo docker login -u &lt;Your DockerHub Login&gt;` and enter your password) and the do the actual push with : `sudo docker push &lt;Your DockerHub Login&gt;/helloworld`.

<aside class="notice">
	Make sure the Image is public in order for Algofab to be able to **pull** the image. If you image is private we recommend you to use our [private registry](#) for free.
</aside>

Now you are ready to create an algorithm on the platform and create a manifest for a version of it. 


## Make a manifest

> Example of manifest for our algo HelloWorld

```json
{
	"version" : "1.0.0",
	"comment" : [
		"<p>This is the very first version. In the nex verison we plan",
		" to fix the bugs to make more stable and also readapt the algorithm",
		" to make it more performant</p>"
	],
	"API" : {
		"GET" : [
			{
				"uri" : "/",
				"inputs" : [
					{
						"name" : "firstname",
						"mime_types" : "text",
						"required" : true
					},
					{
						"name" : "lastname",
						"mime_types" : "text",
						"required" : false
					},
					{
						"name" : "outformat",
						"mime_types" : "text",
						"required" : false
					}
				],
				"outputs" : ["xml", "json", "html"],
				"description" : ""
			},
			{
				"uri" : "/:daytime",
				"inputs" : [
					{
						"name" : "firstname",
						"mime_types" : "text",
						"required" : true
					},
					{
						"name" : "lastname",
						"mime_types" : "text",
						"required" : false
					},
					{
						"name" : "outformat",
						"mime_types" : "text",
						"required" : false
					}
				],
				"outputs" : ["xml", "json", "html"],
				"description" : ""
			}
		],
		"POST" :[
			{
				"uri" : "/",
				"inputs" : [
					{
						"name" : "firstname",
						"mime_types" : "text",
						"required" : true
					},
					{
						"name" : "lastname",
						"mime_types" : "text",
						"required" : false
					},
					{
						"name" : "outformat",
						"mime_types" : "text",
						"required" : false
					}
				],
				"outputs" : ["xml", "json", "html"],
				"description" : ""
			},
			{
				"uri" : "/:daytime",
				"inputs" : [
					{
						"name" : "firstname",
						"mime_types" : "text",
						"required" : true
					},
					{
						"name" : "lastname",
						"mime_types" : "text",
						"required" : false
					},
					{
						"name" : "outformat",
						"mime_types" : "text",
						"required" : false
					}
				],
				"outputs" : ["xml", "json", "html"],
				"description" : ""
			}
		]
	},
	"deployment" : {
		"main_service" : "helloworld",
		"kubernetes" : [
			{
				"apiVersion" : "v1",
				"kind" : "Pod",
				"metadata" : {
					"name" : "helloworld",
					"labels" : {
						"app" : "helloworld",
						"by" : "John_Doe",
						"from" : "Company"
					}
				},
				"spec" : {
					"containers" : [
						{
							"name" : "hello",
							"image" : "skante/helloworld",
							"ports" : [
								{
									"name" : "http",
									"containerPort" : 3000
								}
							]
						}
					]
				}
			},
			{
				"apiVersion" : "v1",
				"kind" : "Service",
				"metadata" : {
					"name" : "helloworld"
				},
				"spec" : {
					"selector" : {
						"app" : "helloworld",
						"by" : "John_Doe",
						"from" : "Company"
					},
					"type" : "NodePort",
					"ports" : [
						{
						 "port" : 3000
						}
					]
				}
			}
		]
	}
}
```

In this section we are going to create a manifest that entirely describe our algorithm. This manifest, in JSON format, must contain any information relative to your algorithm for not only its management but also its deployment on the platform. 

<aside class="notice">
	Before you continue reading you need to visit the [dedicated section](#) to the full explanation of the JSON Manifest, you will find a more exhaustive and hopefully satisfactory explanation. If you haven’t checked that page out yet, we highly recommend you to do so. 
</aside>

### Create an algorithm on the platform

The manifest is not for building an algorithm, rather it is for building a version of your algorithm. That means each version has a manifest of its own, and all the versions of the same algorithm are linked to form the logical object Algorithm.

Let's start by creating an algorithm, to do so visit [<%= config[:algofab_portal] %>/algo/new-algo](<%= config[:algofab_portal] %>/algo/new-algo) and complete the form as shown below in FIG 1 (you might have to Sign in first). 

![FIG 1 : Creating HelloWorld on the Portal](https://ws37-portal.tl.teralab-datascience.fr/docs/images/Algo-new.PNG)

<aside style="background: none;">
	<figcaption style="text-align: center">FIG 1 : Creating HelloWorld on the Portal</figcaption>
</aside>

Here are the information each field relates to :

* **Title** : This field should be the name of your algorithm in a String. Other than its format, the field has to have at least four characters and be validated by the Regular Expression **“^[a-zA-Z0-9_\\.]{4,}$”** (4 charcters miniumum and all alphanumeric). This field is required and unique (two algorithms can not have the same title).
* **Logo** : A logo to associate to your Algorithm. This field is not rquire but if specified, it will be used to identfy the algorithm when appearing a list on Algofab's Portal. 
* **Description** : This field which describes your algorithm will be used to promote it whenever users access to the page of your algorithm. Specifying this field is also obligatory. You can put html code inside your description (as shown in the figure 1), however **_script_ tags are automatically removed from your description**.
* **Keywords** : is a set tags associated with the algorithm and used to perform search tasks. Its format is an Array of String. Although it is higly recommended, this field is not required.

After confirmation, you can see on [<%= config[:algofab_portal] %>/user/myalgos](<%= config[:algofab_portal] %>) that new algorithm appeared. Click on logo representing the HelloWorld you should end up on the page of your algorithm HelloWorld where you can see all the infromation you specified. 

Now we will add a version to this newly created algorithm. 

### Create a version of the newly created algorithm


To create version we will need [manifest in JSON format](#) (follow that link to understand to different parts of that file) to accurately describe two necessary information : the API description (Necessary for the users if they are to use your algorithm in API mode) and the deployment of the infrastructure of the algorithm (including of course the API server). 

We will not redo all the explanation about the Manifest and the meaning of each field, instead we give you the content of the manifest that will be used to create the version (API section of the Documention) and redirect you to [this dedicated entry of the documentation to the manifest](#). 

Now on your HelloWorld page look for the section "Versions" and click on the button "Create new version". You should see a form with only an upload button, that's where you need to upload your manifest. Afterwards you see the trace of operations (as shown below on FIG 2) happening on the platform. 
Whenever there is an error, you will see it as well. 

![FIG 2 : Trace of operation leading to the algorithms deployment.](https://ws37-portal.tl.teralab-datascience.fr/docs/images/Algo-version-submit.PNG)

<aside style="background: none;">
	<figcaption style="text-align: center">FIG 2 : Trace of operation leading to the version's deployment.</figcaption>
</aside>

If that step succeeds, you can go ahead and test your algorithm or more precisely the version.

## Tests

At this point in the tutorial you already created an algorithm on the Portal and created one version of it after creating a REST API to serve your algorithm to the clients, Dockerizing the Server and then creating its manifest. 

After those steps we now have to check that our algorithm work as expected. 

### Demonstration mode 

To see the demo, visit your HelloWorld page (from dropdown on your username -> my contributions -> Click on the logo) and look for the section "Versions". You should see an accordion there with as headers the version numbers of HelloWorld. Click on 1.0.0 (field **version** of the manifest) you should see in the collapsing section four tabs. Click on the third tab "Access Demo" and then click on the button "Show Demo". You might need to allow pop ups in your browser's configuration when it come Algofab for it to work. 

Now you test as much as you want the Demo inside the new window.

### API Mode :

Based on the content of [Execution mode](#), you should [get a token](#) and test that your API works according to the description you gave. These are some example commands you can try with cURL : 

<aside style="background: none;">
	<div style="overflow-x: scroll;">
		<table class="table table-bordered api-table">
	      	<thead>
	        	<tr>
	              	<th style="border: black solid 1px"> Request </th>
	              	<th style="border: black solid 1px"> Expected response </th>
	            </tr>
	      	</thead>
	      	<tbody>
	      		<tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" <br> <%= config[:algofab_rh] %>/HelloWorld?firstname=John&amp;lastname=Doe</code> </td>
	              	<td rowspan="2" style="border: black solid 1px"> HTTP 200 : &lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;... Hello John Doe ...&lt;/body&gt;&lt;/html&gt;</td>
	            </tr>
	      		<tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST -d "firstname=John&amp;lastname=Doe" <br> <%= config[:algofab_rh] %>/HelloWorld</code> </td>
	            </tr>
	      		<tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" <br> <%= config[:algofab_rh] %>/HelloWorld</code> </td>
	              	<td rowspan="2" style="border: black solid 1px"> HTTP 500 : &lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;... Firstname required ...&lt;/body&gt;&lt;/html&gt;</td>
	            </tr>
	      		<tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST <br> <%= config[:algofab_rh] %>/HelloWorld</code> </td>
	            </tr>
	            <tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" <br> <%= config[:algofab_rh] %>/HelloWorld?firstname=John&amp;outformat=xml</code> </td>
	              	<td rowspan="2" style="border: black solid 1px">  HTTP 200 : 
	              		&lt;xml&gt;
							&lt;status&gt; Success &lt;/status&gt;
							&lt;message&gt; Hello Souleymane.&lt;/message&gt;
						&lt;/xml&gt;
					</td>
	            </tr>
	      		<tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST POST -d "firstname=John" <br> <%= config[:algofab_rh] %>/HelloWorld?outformat=xml</code> </td>
	            </tr>
	            <tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" <br> <%= config[:algofab_rh] %>/HelloWorld?firstname=John&amp;outformat=json</code> </td>
	              	<td rowspan="2" style="border: black solid 1px">  HTTP 200 : 
	              		{
							"status" : "Success",
							"message" : "Hello Souleymane."
						}
					</td>
	            </tr>
	      		<tr>
	              	<td style="border: black solid 1px"> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST POST -d "firstname=John" <br> <%= config[:algofab_rh] %>/HelloWorld?outformat=json</code> </td>
	            </tr>
	      	</tbody>
	    </table>
	</div>
</aside>

If your algorithm's version works as intended then you can now go ahead and make it available for other users. To do so look for the eye icon in versions accordion where the collapse title is our version number (Since we only have version 1.0.0 you will find it right away). That icon will allow you to toggle the property **hidden** of the corresponding version. If the property is true then no one except you - the author - can se the version appear on the platform not only in demonstration nor in API mode  

To do so and discover all the possibilities with the Portal, see [Navigate on the Portal](#). 

You can also read the [billing section](#) of the documentation.
