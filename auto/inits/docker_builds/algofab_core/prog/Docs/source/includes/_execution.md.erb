
# API mode manual

This post explains to users how to proceed in order to properly use the API mode offered by the platform, in that regard this part of the documentation targets the client and teach them how to use the platform.

The figure down below shows the interactions between a user and the RH : 

![FIG 1 : Interactions between the user and the RH](https://ws37-portal.tl.teralab-datascience.fr/docs/images/Exec-big-picture.PNG)

<aside style="background: none">
	<figcaption style="text-align: center"> FIG 1 : Interactions between the user and the RH </figcaption>
</aside>

To epxplain FIG 1, there are two parts to cover : "Get a token" and "Formulate your requests", each part dealing with important conepts to keep mind if one wants to use the API mode. 

## Get a Token

When using the execution mode one has to first of get a token from the RH and include it in all his subsquent requests. The token serves to identifies the issuer of the request as well as authorize to particular kind of requests (givn the user has enough credits).

To get a token, one must go to to `<%= config[:algofab_portal] %>/user/history`, inside tab "Token" click on the utton "Create new Token", handle authorizations and after a little while the new token will appear in a table. You can see the process described in the image bellow.


![FIG 2 : Get a token](https://ws37-portal.tl.teralab-datascience.fr/docs/images/slate_doc_api_mode_get_token.gif)
 
In the case presented in the last figure, the token is : **eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJpc3MiOiI1YThlODY1YjI0MmQyYzRkM2E5MjZhZDMifQ.snFs5KSzKJ56S_zZz1FgiEfV1dRXeQvfa8kKSlT-EIs**.

**About the authorizations : **
When creation a Token you can define which types of requests the Token can be used for base on the name of the algorithm or the username of the author of the algorithm. To do that you start by choosing a default rule that can be : "Allow all incoming requests" (accepts any requests by default) and "Deny all incoming requests" (drop any requests by default). Then you can add multiple exceptions, each one applied either on the name of an algorithm or a username of a contributor. 

If the default rule was "Allow all incoming requests", then the exceptions will be the ones and the only rejected by Algofab using this token (if one of the exception are met). On the other if the default rule was "Deny all incoming requests", then the exceptions will be the ones and the only accepted by Algofab using this token (if one of the exception are met).

<aside class="notice">
	When defining exceptions, the values can be regular expression just like presented in the figure below.
</aside>

The figure below shows an example :

![FIG 3 : Set token authorizations](https://ws37-portal.tl.teralab-datascience.fr/docs/images/slate_doc_api_mode_set_token_auth.PNG)

In this example all incoming requests are denied by default except if the algorithm's name is *TrackDownSuperMan* **OR** if the algorithm's name begins with "satelite" (Regular Expression ^satelite) **OR** if the author's username is *lexluthor*. If at least one those conditions are met, then Algofab proceed with the treating the request.

The process we just described is represented in FIG 1 above by the first two arrows. The next arrow shows the user sending a treatment to the Algorithm. This request for treatment could be of any Verb (among GET, POST, PUT or DELETE), the Bearer token should be included, followed by an URL we are going to detail right away. 

## Formulate your requests

Upon receiving a request, Algofab's RH (Request Handler) has to identfy which algorithm and which version of it is the requested for. Part of the URL is used by the RH to achieve that and the rest is proxied to the API server of your algorithm. The following figure shows how to correctly format your requests : 

![](https://ws37-portal.tl.teralab-datascience.fr/docs/images/Exec-url.PNG)

<aside style="background: none">
	<figcaption style="text-align: center"> FIG 2 : URL structure in Execution mode </figcaption>
</aside>

As you can see in FIG 2, the request comprises two major parties : 


* **RH Input Section** : This part of the request concerns the RH. Based on the information contained in that section the RH know how to proxy your request to the approriate Version of the approriate Algorithm. We can divide this section into three parts as well :
  * **Address of RH** : Which is the Address of the RH. For obvious reasons this part has to be specified.
  * **Name of the Algorithm** : Which is the name of the algorithm. This part has also to be specified and must always follow the addres of RH. In the example shown in FIG 2 the name of the Algorithm would be HelloWorld.
  * **Version of the algorithm** : Which is the version of the algorithm to handle your request. This part is not required, however if not given it is equal to the lastest version available for the algorithm. On the other hand if it is specified then it has to follow the Name of the algorithm.

<aside class="warning">
    Be carefull not to create URLs to API server beginning with some /x.y.z, while x, y, and z are number (in other words similar to a version). If you do and the user didn't specify any version, the beginning will be interpreted by the RH as a version of your algorithm, not as being part of the Service URI.
</aside>

* **Service Section** : Considered as parameter for the API server, this part of the request is what is proxied to the API server.

Now going back to FIG 1, when the RH receive a correctly formatted request, he splits the URL and keeps only service part after he establish which API Server to to proxy the request to (thanks to the early part of the initial URL) and proxies the request to the API Server (same Verb and same Body if any). 

_**Example** : Let's say you have an algorithm named "RoundRobin" implementing the Round-Robin Scheduling method for some tasks. Let's assume that you can change the value of the quantum for this algorithm by addressing a PUT request on the URI "/quantum" with a body parameter value (value being the new value of the quantum). To send this request with cURL type :_

`curl -H "Authorization: Bearer <Token>" -X PUT -d "value=2ms" https://ws37-rh.tl.teralab-datascience.fr/RoundRobin/quantum`

It is then up to the API Server to update the quantum to 2ms. 
