


  
<!DOCTYPE html>
<html>
    <head>
        <% include partials/head %>

    </head>
    <body>
        <% include partials/header %>


        <div class="container">
        	<aside class="col-sm-2" id="side-nav">
				<div id="side-nav-title" class="row"> Contents </div>
				<ul class="row">
					<li id="id1"> <a href="#"> The user roles </a> </li>
					<li id="id3">
						<a href="#"> The A-nodes </a>
						<ul>
							<li> <a href="/docs/getting-started/api"> The portal </a> </li>
							<li> <a href="/docs/getting-started/api"> The Infrastructure manager </a> </li>
							<li> <a href="/docs/getting-started/api"> The Request handler </a> </li>
						</ul> 
					</li>
				</ul>
			</aside>
			
	        <div class="col-sm-10" id="current-content">
		        <p>
					<h3>Platform</h3>
					<p>
						AlgoFab is a project issued by the efforts of five companies with the objective to allow algorithm creators (companies and developers alike) to promote their algorithms.
					</p>
					<p>
						The companies initiating the project (and still maintaining it) are  <a href="#">Institut Mines Télécom (IMT)</a>, <a href="#">Cloudwatt</a>,  <a href="#">Global Sensing Technologies (GST)</a>, <a href="#">Globe VIP</a>,  and <a href="#">LIRIS)</a>.
					</p>
					<p>
						The platform is for anyone (lone developers and companies alike) who created an algorithm which he wants to let other users profit from it while making some throughout the utilization.
					</p>
					<p> 
						Here we give an overall description of the platform to give a better understanding of it to the <a href="#">Contributors</a>. The contributors need also to know about the existence of some of the entities working in coordination to allow for the existence of AlgoFab.
					</p>
					<p>
						Throughout this page here are the points we will go over : 
						<ul>
							<li>The user roles</li>
							<li>
								The A-nodes
								<ul>
									<li>The portal</li>
									<li>The Infrastructure manager</li>
									<li>The Request handler</li>
								</ul>
							</li>
						</ul>
					</p>
				</p>
				<!--Before anything, whom is the platform AlgoFab is made for? It is made for anyone desiring to make popular an algorithm / application of his and also at the same time making money off of it.--> 
				<p>
					<h4>User roles :</h4>
					<p> 
						There are several roles currently within the AlgoFab platform and terminologies associated to them according to the need of the users (Contributors and Users) or their duties.
					</p>
					<p>
						Here are the different roles we have on the platform :
						<ul>
							<li><b>Contributors</b> : Those who create algorithms on the platform enriching the catalog of algorithms.</li>
							<li><b>Users</b> : Those who subscribe to, then use the algorithms created by the contributors.</li>
							<li><b>Admin</b> : those who maintain the platform at the background and bring support to Users and Contributors alike.</li>
						</ul>
					</p>
					<p>
						Note that anyone on the platform can simultaneously be a contributor and a simple user, meaning that a user can both create an algorithm on the platfrom and still use other people’s algorithms. We don’t actually make that distinction when you subscribe to AlgoFab, however that way of naming, more associated to the action in a particular scenario than to the status of the users themselves, helps us refer to either one those two kind of Users. Let’s explain it further. In a scenario the producer is a Contributor while the consumer is a simple user. That does not mean that in another instance the previously producer cannot become a consumer.
					</p>
				</p>

				<p>
					<p>
						<h4>The A-nodes :</h4> 
						<p>
							A-node stands for AlgoFab nodes which are the different machines working with each in order to form the platform as a whole. <br>
							Before we give a proper explanation about the end nodes, have a look at this picture below :
						</p>
						<p>
							<img src="/img/Algofab-architecture.PNG" alt="Algofab architecture">
						</p>
						<p>
							In this picture, the most important machines are three : the Portal, the Request Handler (RH) and the Infrastructure Manager (IM).  <br>
							What we see is at the left are external clients accessing the algorithms, some using a browser are served by the portal and others using an external application (by REST requests) are served by the Request Handler. In both cases the node (Portal or RH) serve as an entry point to access the algorithms with are managed infrastructure-wise by the IM. The two other machines, Node1 and Node2 are A-node used exclusively in the cluster Kubernetes and for information there might be even more than two.
						</p>
						<p>
							We saw earlier that there are two ways of accessing an algorithm : either through the Portal or the IM. The difference is as follow :
							<ul>
								<li>
									<b>Mode Demo</b> : The Portal gives access to the demo of the algorithm. It is an html code interpreted by the web browser so the users can test your algorithm. It is sort of an introduction (or a pitch if you prefer) to convince other users of the originality of your algorithm (compared other algorithms providing a solution to eventually the same kind of need). That means that Contributors must keep that in mind (the demo it does not have to be thorough, just an insight would be enough).
								</li>
								<li>
									Mode Execution : The Request handler manages API calls form the authorized users (subscribed to your algorithm) and relay them onto the microservices previously created by the IM.
								</li>
							</ul>
						</p>
						<p>
							Let’s details the functions of each A-node.
						</p>
					</p>
					<p>
						<h4>Portal :</h4>
						<p> 
						The Portal is one of the entities in AlgoFab and certainly the one you will have the most interactions with. This webserver allows you to operate on your algorithms performing updates, management or even deletes. Once you demand the creation of an algorithm, it records some data about your algorithm (data used by the portal to present your algorithm and offer services like searching on your algorithm) triggers the creation the infrastructure on the IM. After that process ends successfully your algorithm will be accessible through both the portal and the infrastructure manager.
						</p>
						<p>
							Given that you are already an AlgoFab user, these are some of the functionalities of the portal :
							<ul>
								<li>
									Create / delete an algorithm
								</li>
								<li>
									Create / delete version(s) of an algorithm
								</li>
								<li>
									Hide version(s) of an algorithm so no one can use it apart from you
								</li>
								<li>
									Pass ownership of the algorithm to another (not yet implemented)
								</li>
								<li>
									Update data about your algorithm (description, tags … See <a href="/docs/json-manifest">JSON manifest</a> for more detail) (not yet implemented)
								</li>
								<li>
									Update data about a version of an algorithm (comment, API, … See <a href="/docs/json-manifest">JSON manifest</a> for more detail)
								</li>
								<li>
									Update the infrastructure of your algorithm (not yet implemented)
								</li>
								<li>
									Create / Delete “free" Kubernetes objects, meaning not related to any algorithm, which can be used later on by next algorithms. (not implemented yet)
								</li>
							</ul> 
						
						</p>
					</p>
					<p>
						<h4>Request Handler :</h4>
						<p>	
							The RH is the server that handle incoming REST API calls in order to allow external application to access the algorithm. The kind of response returned by such a call is typically (the Contributor / developer has to make sure of it) formatted in well-known formats so that the user can parse them and use them in an external application. 
						</p>
						<p>
							There are some tricks to remember described <a href="">in this dedicated page</a> when sending requests in execution mode.
						</p>
					</p>
					<p>
						<h4>Infrastructure manager :</h4> 
						<p>
							The IM is the server that creates and manage our infrastructure built by <a href="#">Kubernetes</a>. 
						</p>
						<p>
							Kubernetes is container orchestration tool created by <a href="">Google</a> that facilitate building up micro-services. You should start by reading their interactive tutorial if you are not familiar with at all. At AlgoFab we decided to make it a requirement because its numerous functionalities and the ease of management of our infrastructure.
						</p>
						<p>
							On the machine where the IM is running is the master of the Kubernetes cluster.
						</p>
						<p>
							It is important to remember that as of today, this is information about the version of Kubernetes used on the master : <br>
							<code class="open-close-content">
								Client Version: version.Info{Major:"1", Minor:"6", GitVersion:"v1.6.3", GitCommit:"0480917b552be33e2dba47386e51decb1a211df6", GitTreeState:"clean", BuildDate:"2017-05-10T15:48:59Z", GoVersion:"go1.7.5", Compiler:"gc", Platform:"linux/amd64"}
								Server Version: version.Info{Major:"1", Minor:"7", GitVersion:"v1.7.3", GitCommit:"2c2fe6e8278a5db2d15a013987b53968c743f2a1", GitTreeState:"clean", BuildDate:"2017-08-03T06:43:48Z", GoVersion:"go1.8.3", Compiler:"gc", Platform:"linux/amd64"}
							</code>
						</p>
					</p>
				</p>

	        </div>
        </div>
        <% include partials/footer %>

        <!--
        <script type="text/javascript">

        	$('#side-nav').css({
				"background-color" : "#D3D3D3",
				"border-radius" : "5px"
			});
			
			$('#side-nav-title').css({
				"text-align" : "center",
				"font-size" : "1.5em",
				"border" : "1px solid black",
				"border-radius" : "5px 5px 0px 0px",
				"padding" : "1em",
				"background-color" : "#383838",
				"color" : "white"
			});
			$('#side-nav ul').css({
				"list-style-type" : "none",
				"margin" : "0",
				"padding-left" : "0",
				"padding-right" : "0"
			});

			$('#side-nav ul ul').css({
				"margin-left" : "1em"
				
			});

			$('#side-nav ul li a:link').css({"color" : "black"});
			$('#side-nav ul li a:visited').css({"color" : "#669999"});
			$('#side-nav ul li a:hover').css({"color" : "green"});


			$('#change-nav div').css("margin-top" , "1em");
			$('#change-nav div button span').css("vertical-align" , "middle");
			$('.a-span').css({
				"font-weight" : "bold",
				"font-size" : "2em"
			});
			


        	var open_close_second_try = function(){
				var content = $(this).html(), lines = content.split('\n');
				if(lines.length == 0)
					return;

				var first_indent = 0;
				for(var i=0; i < lines.length; i++){
					if(lines[i]){
					 	first_indent = lines[i].length - lines[i].replace(new RegExp("^\t*"), "").length;
					 	//console.log("lines[i] : "+lines[i])
						//console.log("lines[i].length : "+lines[i].length);
						//console.log('lines[i].replace(new RegExp("^\t*"), "") : '+lines[i].replace(new RegExp("^\t*"), ""));
						//console.log('lines[i].replace(new RegExp("^\t*"), "").length : '+lines[i].replace(new RegExp("^\t*"), "").length);
						//console.log(' first indent = '+first_indent);
						break;
					}

				}
				

				for(var i=0; i < lines.length; i++){
					lines[i] = lines[i].replace(new RegExp('^\t{'+(first_indent)+'}'), '');
				}
				content = $('<pre>'+lines.join('\n')+'</pre>');

				content.hide();
				
				var toggle = $('<span>Toggle content <span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span></span>');
				toggle.click(function(){
					content.toggle();
					toggle.html(function(){
						if(/chevron-down/.test(toggle.html()))
							return '<span>Toggle content <span class="glyphicon glyphicon-chevron-up" aria-hidden="true"></span></span>';
						else
							return '<span>Toggle content <span class="glyphicon glyphicon-chevron-down" aria-hidden="true"></span></span>'
					});
				});
				toggle.css({
					"color" : "red",
					"text-decoration" : "underline",
					"cursor" : "pointer"
				});
				var new_content = $('<div></div>');
				new_content.css({
					"margin-top" : "1em"
				});
				new_content.append(toggle);
				new_content.append(content);
				
				return new_content;

			}

        	$('.open-close-content').html(open_close_second_try);
        </script>
        -->
        <% include docs/script %>
    </body>
</html>



