
<!DOCTYPE html>
<html>
  	<head>
		<% include ../../partials/head %>
    
  	</head>
  	<body>
    	<% include ../../partials/header %>

    	<div class="container">
    		<div class="row">
    			<aside class="docs-menu col-sm-3">
		    		<%- generateMenu( docs ) %>
		    	</aside>
		    	<div class="col-sm-9">
   					<h3> Dockerization </h3>
					<p>
						Now that we built our Algorithm and our API Server, let’s package the result into an image.
					</p>
					<p>
						<b>If you are not familiar with Docker we suggest you read the <a href="https://docs.docker.com"> documentation </a>before you continue.</b>
					</p>
					<p>
						Let’s start by creating a Dockerfile. Here is the content of the Dockerfile we will use to create the image of our application : <br/>
						<code id="hello-docker-code" class="open-close-content">
							
							# Base image from which we construct our own
							FROM ubuntu:16.04

							# Update the image and install the tools we need
							RUN apt-get update -y && apt-get install -y nodejs-legacy npm curl nano

							# Create Hello-World folder in the Image and copy the contents from my OS to the Image
							RUN mkdir /Hello-World-Package
							COPY .  /Hello-World-Package

							# Chane the current working directory
							WORKDIR /Hello-World-Package/Hello-World

							# Update nodejs version
							RUN bash ../update-node.sh

							# Command executed each time a container created from this image is started
							CMD npm start

						</code>
						<p>
							No further explanation is required as the comments explain what we are doing. If you need a reminder take a look at the <a href=”https://docs.docker.com/engine/reference/builder/”>Dockerfile reference</a>. <br/>
							In order for the commands to come to work, you need to make sure that your Docker file and the folder "Hello-World" (API Server) are in the same directory. 
						</p>
					</p>

					<p>
						<p>
							We then need to build this image while tagging it with our login. Place into the same folder as your Docker file and make sure your Hello-World folder also present then type the following : <br/>
							<pre><code>sudo docker build -t &lt;Your Hub Login&gt;/helloworld .</code></pre> <br/>

							where &lt;Your Hub Login&gt; is your Docker hub username. This way of tagging (preceding the image name by your Login) will allow you to push the image to your docker registry. Make sure you don't forget the "." after &lt;Your Hub Login&gt;/helloworld.<br/>
							If this command ran successfully, then you should have locally the image &lt;Your Hub Login&gt;/helloworld. To make sure of it, type : 
							<pre><code>sudo docker images</code></pre> <br/>
							and you should see it appear. <br>
						</p>

						<p>
							This ends the Dockerization but there is an extra step to perform. Indeed the image you just built is accessible only on your local machine, you need <em>push</em> it in the Docker registry so the <a href="#">IM</a> can <em>pull</em> it and deploy your algorithm.<br>
							To push the image to you registry you must connect to it first by tapping : <br/>
							
							<pre><code>sudo docker login -u &lt;Your Hub Login&gt; -p &lt;Your Hub Password&gt;</code></pre> <br/>
							
							where &lt;Your Hub Password&gt; is the password to you Docker hub account. <br/>
							Now that you are connected, type the following to realize the actual push : <br/>
							<pre><code>sudo docker push &lt;Your Hub Login&gt;/helloworld</code></pre> <br/>
							
							At the end of this command your image can, from then on be accessed in the Docker registry.
						</p>
						
						<p class="alert alert-info">
							If you decide to make your image private don't forget to add "skante" as collaborator otherwise we won't be able to pull on your image therefore the whole process will fail.
						</p> <br/>
						Now you are ready to create an algorithm on the platform and create a manifest for a version of it.
					</p>
				</div>
			</div>
		</div>

		<% include ../../partials/footer %>
	</body>
</html>