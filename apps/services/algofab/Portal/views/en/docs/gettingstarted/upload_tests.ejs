					<h3> Tests </h3>
					<p>
						At this point in the tutorial you already created an algorithm <a href="">online</a> and created one version of it after designing an application, creating a REST API to go along with it, Dockerizing them and then creating its manifest. After those steps we now have to check that our algorithm work as expected. 
					</p>

					<p>
						<h4>Demo</h4>
						<p>
							To see the demo, visit your HelloWorld page (from dropdown on you username -> my contributions -> "visit page" under HelloWorld box) and look for section "Versions". You should see an accordion there with as headers the versions of HelloWorld. Click on 1.0.0 and at the bottom of comment (same as the field in the JSON manifest if you look closely), click on the link "More about this version". You should end up in the Demo page where there are four tabs. <br>
							<ul>
								<li>
									<b>General Information</b> : this Tab introduces your algorithm to users. The page is made of the field "Description" of your Algorithm plus the field "comment" from the version's manifest.
								</li>
								<li>
									<b>API</b> : this Tab tells users how to use your Algorithm notably in execution mode. The API is taken from the field API of the manifest.
								</li>
								<li>
									<b>Use</b> : this Tab shows the demo of the algorithm inside an iframe.
								</li>
								<li>
									<b>Report a bug</b> : this Tab lets users tell your if something is wrong with your Algo (if not working as expected).
								</li>
							</ul>
						</p>
						<p>
							Test your Demo in the "Use" Tab to see if everything is fine.
						</p>
					</p>
					<p>
						<h4>Execution</h4>
						<p>
							Based on the content of <a href="/docs/execution-mode">Execution mode</a>, you should <a href="/docs/execution-mode#get-token">get a token</a> and test you API works according to the description you gave (Of course while setting up you algorithm you must have tested that everything works before uploading your work on the platform). These are some example commands you can try with <code>cURL</code> :

							<table class="table table-bordered api-table">
				              	<thead>
				                	<tr>
					                  	<th> Request </th>
					                  	<th> Expected response </th>
					                </tr>
				              	</thead>
				              	<tbody>
				              		<tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" https://req-handler.hopto.org/HelloWorld?firstname=John&amp;lastname=Doe</code> </td>
					                  	<td rowspan="2"> HTTP 200 : &lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;... Hello John Doe ...&lt;/body&gt;&lt;/html&gt;</td>
					                </tr>
				              		<tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST -d "firstname=John&amp;lastname=Doe" https://req-handler.hopto.org/HelloWorld</code> </td>
					                </tr>


				              		<tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" https://req-handler.hopto.org/HelloWorld</code> </td>
					                  	<td rowspan="2"> HTTP 500 : &lt;html&gt;&lt;head&gt;...&lt;/head&gt;&lt;body&gt;... Firstname required ...&lt;/body&gt;&lt;/html&gt;</td>
					                </tr>
				              		<tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST https://req-handler.hopto.org/HelloWorld</code> </td>
					                </tr>


					                <tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" https://req-handler.hopto.org/HelloWorld?firstname=John&amp;outformat=xml</code> </td>
					                  	<td rowspan="2">  HTTP 200 : 
					                  		&lt;xml&gt;
												&lt;status&gt; Success &lt;/status&gt;
												&lt;message&gt; Hello Souleymane.&lt;/message&gt;
											&lt;/xml&gt;
										</td>
					                </tr>
				              		<tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST POST -d "firstname=John" https://req-handler.hopto.org/HelloWorld?outformat=xml</code> </td>
					                </tr>


					                <tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" https://req-handler.hopto.org/HelloWorld?firstname=John&amp;outformat=json</code> </td>
					                  	<td rowspan="2">  HTTP 200 : 
					                  		{
												"status" : "Success",
												"message" : "Hello Souleymane."
											}

										</td>
					                </tr>
				              		<tr>
					                  	<td> <code>curl -H "Authorization: Bearer &lt;Token&gt;" -X POST POST -d "firstname=John" https://req-handler.hopto.org/HelloWorld?outformat=json</code> </td>
					                </tr>

				              	</tbody>
				            </table>
						</p>
						<p>
							If your algorithm works as intended then you can now go ahead and make it available for other users. To do so and discover all the possibilities with the Portal, see <!--<a href="/docs/navigate-on-portal">--><a href="#">Navigate on the Portal</a>. 
						</p>

					</p>
					<!--
					<p>
						If the intructions of the previous paragraph are sucessfull you can now move to algofab/user/myalgos to see all the algorithms you deployed on the platform. <br/>
						
					</p>
					<p>
						As long as your manifest conforms to the constraints noted in the <a href="#"> manifest reference </a> (required fields specified at the correct format), even if you don't get errors, chances are the algorithm is already recorded in the database. In other words despite the kubernetes-side problems you might have (field deployment of the manifest), as long as the rest is good the algo is considered created (it is however considered <b> not ready</b> if the infrastructure fails to create). The reason is to allow users to query informations about the kubernetes objects they created in hope for them to pinpoint the reason behind the error and correct it if possible (if error related to the given package).
					</p>
					<p>
						Let's close this parenthesis and resume our tutorial. From algofab/user/myalgos you can click on "See for yourself" corresponding to your algorithm (Hello World) : you end up on the page of the algorithm. <br/> 
						On this page you have four tabs : the first introduces the algorithms using fields "title", "version" and "description" of the manifest; the second presents the REST API using the field API, the third shows the demo of the algorithm (obtained by "GET /" on the REST API) and the last one allows users to report bugs or disfunctions to you (the author of the algorithm). <br/>
						Take your time to explore all of those tab.
					</p>
					<p>
						You can remark a gearing all the way to the right on the same line than the tabs, click on it and you will access the administration page of your algorithm. You can see the gearing because you are author of the algorithm, if weren't not only would you not be able to see it and if you tried manually (typing the adress in your browser) you would be redirected towards home. <br/>
						On this page you have many sections among which 
						<ul>
							<li>
								The Simple operations section allowing you to either remove or change the property "hidden" of you algorithm. Remove the algorihtm not only removes the algorithm from the database but also the kubernetes objects we created and then clean the files associated with them
							</li>
							<li>
								The update section where you can upload a new JSON file corresponding to the field deployment of ou manifest. This section allows you to update the infrastructure of your algorithm, the new file replaces the old deployment.
							</li>
							<li>
								the Kubernetes objects you tried to create. You can see their states and can access thier descriptions (equivalent to <code>kubectl describe</code>) (usefull to watch the events and eventually detect the error if creation failed) or the full description (equivalent to <code>kubectl get ... -o json</code>).
							</li>
						</ul>
						
					</p>
					<p>
						
					</p>
					-->