
 
<!DOCTYPE html>
<html>
    <head>
        <% include partials/head %>

    </head>
    <body>
        <% include partials/header %>
        <div class="container">
			<aside class="col-sm-2" id="side-nav">
				<div id="side-nav-title" class="row"> Contents </div>
				<ul class="row">
					<li id="id1"> <a href="#version"> Version </a> </li>
					<li id="id2"> <a href="#comment"> Comment </a> </li>
					<li id="id3">
						<a href="#deployment"> Deployment </a>
						<ul>
							<li> <a href="#kubernetes"> Kubernetes </a> </li>
							<li> <a href="#main-service"> Main Service </a> </li>
						</ul> 
					</li>
					<li id="id3">
						<a href="#api"> API </a>
						<ul>
							<li> <a href="#auo"> Api Uri Object (AUO) </a> </li>
							<li> <a href="#uio"> Uri Input Object (UIO) </a> </li>
						</ul> 
					</li>
				</ul>
			</aside>
			
			<div class="col-sm-10" id="current-content">
				
				<h2> JSON Manifest reference </h2>
	            <div class="content">
	            	<p>
						The JSON manifest is the file in which you express every useful information about a particular version of your algorithm not only. This file is not only required for management purposes (for AlgoFab) but also for infrastructure purposes (to build the resources  in our Kubernetes environment). 
					</p>
					<p>
						To summarize it, here are the different fields of our manifest :
						<code class="open-close-content do-not-hide">
							{
								version : {type : String, default : "1.0.0"},
								comment : String,
								deployment : Object,
								API : Object
							}
						</code>
					</p>
					<p class="alert alert-warning">
						Be cautious of the case when wrtitting your manifest. Indeed, while analysing your manifest, the AlgoFab servers are very case-sensitive.
					</p>
					<!-- Title 
					<p>
						<h3>Title : </h3>
						This field should be the name of your algorithm in a String format as you can see above. Please, be warned that this parameter is required, therefore if it is not given or if it is in the wrong format you will receive an error message to indicate it. Other than the format we have two other rules about the field title : the field has to have at least four characters and pass the Regular Expression “^[a-zA-Z0-9_\.]{4,}$”.
					</p>
					-->

					<!-- Version -->
					<p>
						<h3 id="version">version : </h3>
						This field express the version of the algorithm. It is in a String format as you can see above. Its default value is “1.0.0”. If this manifest is for a different version of your algorithm (1.0.1 for example), then when specified, the version has to match this regular expression : “^[0-9]+\.[0-9]+\.[0-9]+$”.
					</p>

					<!-- Description -->
					<p>
						<h3 id="comment">comment :</h3>
						This field describes the version and will used to present specificities of the version. It will to be used with the description of your algorithm (given when you first create the algorithm) to present it on the Demo page. You don't have to specify it but you do, note that it must be a String or an Array of String. Note also that it accepts HTML code, the &lt;script&gt; element are however remove automatically. To give an example, the following should work just fine :
						
						<code class="open-close-content do-not-hide">
							comment : [
								“&lt;p&gt;Paragraph beginning | line 1”,
								“line 2”,
								…
								“line n | Paragraph ending : &lt;/p&gt;” 
							] 
						</code>
					</p>

					<!-- Keywords 
					<p>
						<h3>keywords : </h3>
						Keywords is a set tags associated with the algorithm and used to perform search tasks. Its format is an Array of String. This field is not required.
					</p>
					-->
					<!-- Deployment -->
					<p>
						<h3 id="deployment">deployment : </h3>
						<p>
							This field is partly used by the <a href=”#”>IM</a> to create the Kubernetes objects for our algorithm. Therefore in order to create an algorithm on our platform you have to know at least basics of Kubernetes (enough to make an application according to your need). We suggest you begin by the excellent <a href=” https://kubernetes.io/docs/tutorials/kubernetes-basics/”> Interactive tutorial </a> on Kubernetes’ website. The field deployment is required. <br/>
							Now coming back to our field deployment, there is two other fields inside (both required) : “kubernetes”  and “main_service”.
						</p>
						<h4 id="kubernetes">kubernetes : </h4>
						<p>
							The Kubernetes field is an array of objects, each object being the JSON description of a Kubernetes object. Please note that the order of the kubernetes objects inside this Array is important because creation of the objects are launched one after another in the order they appear inside the subfield Kubernetes.
						</p>
						<p class="alert alert-info">
							You need to put inside the array of the field "deployment.kubernetes" the specs of every kubernetes objects needed. For the time being we filter the field "kind" of your kubernetes objects to let Contributors create only certain types of objects. As of today the types of Kubernetes object you can create are : Pods, Services and ReplicationControllers.
						</p>

						<p>
							<h4 id="main-service">main_service :</h4>
							<p>
								The subfield main_service is a String equivalent to the name of the main service of the algorithm. This subfield is required and its value must be the name of a NodePort type Service specified in the kubernetes subfield’s Array.
							</p>
						</p>
						<p>
							You must also create a kubernetes service of “NodePort” type to expose your algorithm outside the kubernetes cluster, we call this particular service the main service.
						</p>
						<p>
							<u><b>Example</b></u> : 
							<p>
								Let’s say your application is a webserver that requires two pods to run. Let’s say first pod is a webserver called “web” and the other is a database called “db”. You should also create two services : the first one called “db-service” to expose your pod “db” inside the kubernetes cluster and the second one called “my-web-app” of type “NodePort” that will expose your pod “web” (this is our main service)  outside the cluster. This way your application will be accessible by other users. 
							</p>
							<p>
								There is one last step to not forget otherwise we might have an error while building the algorithm on Algofab : the order in which we deploy our kubernetes objects. Indeed we should start by the pod “db” since this pod does not depend on any other objects, then we put service “db-service” to expose it inside the cluster, then comes the pod “web” that now can use the pod “db” through the service “db-service” and finally comes the main_service to expose the whole application outside the cluster. Therefore inside your subfield kubernetes you need to put your objects in that order : Pod db, Service db-service,  Pod web, Service my-web-app.
							</p>
						</p>
						
					</p>

					<!-- API -->
					<p>
						<h3 id="api">API :</h3> 
						<p>
							This field is meant to explain the API of you algorithm to other users for effective use in execution mode. This field is also required. 
							<!-- We decided to reason around Verbs (group our API elements according to Verb) rather than around the URI (group our API elements according to the URI of the service). -->
						</p>
						<p>
							This is how its content is structured : <br/>
							<code class="open-close-content  do-not-hide">
								{
									GET : { type : [ AUO ], default : undefined },
									POST : { type : [ AUO ], default : undefined },
									PUT : { type : [ AUO ], default : undefined },
									DELETE : { type : [ AUO ], default : undefined },
								}   
							</code>
						</p>


						<p>
							From the API’s content structure shown above let’s notice the following : <br>
							<ul>
								<li>
									For now there are only four Verbs taken into account by the API description (as they are the most commonly used) : GET, POST, PUT, DELETE.
								</li>
								<li>
									None of those Verbs is particularly required, you should only specify the ones your algorithm use. However, though none of them is required, you cannot omit all of them at once either, that will cause an error during the control process and prevent the creation of your algorithm to proceed any further.
								</li>
								<li>
									Type AUO does not actually exist in JavaScript. AUO (for Api Uri Object) is a name we use to refer to a JavaScript Object structure suitable to describe part of the API.
								</li>
								<li>
									Any Verb we specify must be an Array of AUOs.
								</li>
							</ul>
						</p>


						<p>
							<h4 id="auo">Api Uri Object (AUO) : </h4> 
							<p>
								Like said before, AUOs help define the API, you can also compare it to an API call to the server of your algorithm. It is structured like the following : <br>
								<code class="open-close-content  do-not-hide">
									{
										uri : { type : String, default : “/”}
										inputs : { type : [ UIO ], default : [] },
										outputs : [String],
										description : String 
									}
								</code>
							</p>
							<p>
								Here is the explanation of every field inside AUO objects : <br>
								<ul>
									<li>
										<b>uri :</b> is a String identifying the URI this object is applied to. It has a default value of “/”.
									</li>
									<li>
										<b>inputs :</b> this field shows the possible input objects for the corresponding Verb (the verb our AUO object is part of) on this “uri” (first point described just above). “inputs” subfield is an Array of another self-defined object structure called UIO (more on below). We leave the possibility <!--(even if it kind of does not make any sense)--> that the “inputs” subfield is (by default) an empty Array, in which case there is no input (not even optional ones) for the matching Verb and URI.
									</li>
									<li>
										<b>outputs :</b> this field is an Array of String representing the output formats available with your algorithm. You are free to put whatever you like into this Array as we don’t put any constraints on it during the control process, but make sure the values you put in there are meaningful (examples : “html”, “json”, “xml”).
									</li>
									<li>
										<p>
											<b>description :</b> Similar to the field "comment" described above but rather explaining the use of the current AUO. It indeed is similar to the description field above in that you can : either specify it either as a String or an Array of String, you can put html inside (except for script elements). However it is required (unlike "comment").
										</p>
										<!--
										<p>	
											This approach does not allow to enjoy the possibility of using multiple ports for the same Kubernetes Service, therefore is a bit limited. We plan to change that in the future so instead of using a parameter like outformat, contributors put different two servers in their Pod(s) (one taking care of the demonstration mode and the other taking care of the execution mode) then expose them all through the main services.
										</p>
										-->  
									</li>
								</ul>
							</p>
						</p>

						<p class="alert alert-info">
							You should know that AlgoFab considers your algorithm as having only one way to communicate (through the main_service), therefore you cannot have more than one Server (in you Kubernetes Objects) as entry points to your algorithm. Please take notice of this fact an change your API Server accordingly. If you must expose several resources to the outside, use a single Server to serve them all or a use proxy, just make you have one entry point to your algorithm.
						</p>

						<p> 
							When you design your algorithm we ask of you to anticipate that your algorithm will be used both in Demo mode as well as in Execution mode. The Demo mode is when the API Server returns an HTML content to present the algorithm. On the other hand the Execution mode is when a user access the algorithm in order to use its output data for his own applications. The major difference between the two mode (from the API Server developer's point of view) is : in Demo mode the Server returns the data as an HTML content (Demo) and in Execution mode the Server returns the data in a well-known format so the user can parse it and exploit it in his own application.

						</p>

						<p class="alert alert-info">
							The API Server should have an output format control parameter allowing the user to specify which format is more suitable for him. We decided to standardize a query parameter "outformat" for the sake of simplicity for the users.
						</p>
						<p class="alert alert-info">
							For each algorithm, AlgoFab considers the demonstration available at “GET /”. That means that we are expecting an HTML content whenever we send that request to the main_service of your algorithm. Therefore the default value of your "outformat" must be “html”.
						</p>  
													

						<p>
							<h4 id="uio">Uri Input Object (UIO): </h4> 
							<p>
								The UIO is an object structure expressing the inputs of a given API call. It is structured as such : <br>
								<code class="open-close-content  do-not-hide">
									{
										name : String,
										mime_types : [String],
										required : Boolean
									}
								</code>
							</p>
							<p>
								The meaning of the subfields are pretty straight forward. The reason we set the type of mime_types to an Array is because so the contributor can express whether an input can expect different types of data. As an example we might give possibility to users to either upload a file or to give an URL to a file as the value for an input. Let’s say the file is an mp3 file, then in the first case the input’s type should be “audio/mp3” and in the second case it should be “text/plain”. 
							</p>
							<p>
								Important : We ask so many details about your API so it can benefit the users whenever they subscribe to your algorithm and want to use it in execution mode. We don’t actually use any information in the API for anything on AlgoFab, we just display it to the users just as you provided it. Thus you should make sure the API matches the REST API of your algorithm.  
							</p>
							<p>
								Let’s put everything together and go over the structure of the manifest (plainly detailed without the use of AUO or UIO) : <br>
								<code class="open-close-content">
									{
										version : {type : String, default : "1.0.0"},
										comment : String,
										keywords : Array,
										deployment : {
											main_service : String,
											kubernetes : { type : Array, default : undefined }
										},
										API : {
											GET : {
												type : [{
													uri : {type : String, default : '/'},
													inputs : {
											    			type : [ 
													    		{
																name : String,
																type : [String],
																required : Boolean
															}
														],
														default : []
													},
													outputs : [String],
													description : [String]
												}], 
												default : undefined
											},
											POST : {
												type : [{
													uri : {type : String, default : '/'},
													inputs : {
											    			type : [ 
													    		{
																name : String,
																type : [String],
																required : Boolean
															}
														],
														default : []
													},
													outputs : [String],
													description : [String]
												}], 
												default : undefined
											},
											PUT : {
												type : [{
													uri : {type : String, default : '/'},
													inputs : {
											    			type : [ 
													    		{
																name : String,
																type : [String],
																required : Boolean
															}
														],
														default : []
													},
													outputs : [String],
													description : [String]
												}], 
												default : undefined
											},
											DELETE : {
												type : [{
													uri : {type : String, default : '/'},
													inputs : {
											    			type : [ 
													    		{
																name : String,
																type : [String],
																required : Boolean
															}
														],
														default : []
													},
													outputs : [String],
													description : [String]
												}], 
												default : undefined
											}
										}
									}
								</code>
							</p>
							<p>
								An example of manifest (taken from the <a href=”#”>“HelloWord”</a> algorithm) is shown below :
								<code class="open-close-content">
									{
										"version" : "1.0.0",
										"comment" : "Some greeting application",
										"keywords" : ["Simple", "Bash", "Example"],
										"API" : {
											"GET" : [
												{
													"uri" : "/",
													"inputs" : [
														{
															"name" : "firstname",
															"mime_types" : "text",
															"required" : true
														},
														{
															"name" : "lastname",
															"mime_types" : "text",
															"required" : false
														},
														{
															"name" : "outformat",
															"mime_types" : "text",
															"required" : false
														}
													],
													"outputs" : ["xml", "json", "html"],
													"description" : ""
												},
												{
													"uri" : "/:daytime",
													"inputs" : [
														{
															"name" : "firstname",
															"mime_types" : "text",
															"required" : true
														},
														{
															"name" : "lastname",
															"mime_types" : "text",
															"required" : false
														},
														{
															"name" : "outformat",
															"mime_types" : "text",
															"required" : false
														}
													],
													"outputs" : ["xml", "json", "html"],
													"description" : ""
												}
											],
											"POST" :[
												{
													"uri" : "/",
													"inputs" : [
														{
															"name" : "firstname",
															"mime_types" : "text",
															"required" : true
														},
														{
															"name" : "lastname",
															"mime_types" : "text",
															"required" : false
														},
														{
															"name" : "outformat",
															"mime_types" : "text",
															"required" : false
														}
													],
													"outputs" : ["xml", "json", "html"],
													"description" : ""
												},
												{
													"uri" : "/:daytime",
													"inputs" : [
														{
															"name" : "firstname",
															"mime_types" : "text",
															"required" : true
														},
														{
															"name" : "lastname",
															"mime_types" : "text",
															"required" : false
														},
														{
															"name" : "outformat",
															"mime_types" : "text",
															"required" : false
														}
													],
													"outputs" : ["xml", "json", "html"],
													"description" : ""
												}
											]
										},
										"deployment" : {
											"main_service" : "helloworld",
											"kubernetes" : [
												{
													"apiVersion" : "v1",
													"kind" : "Pod",
													"metadata" : {
														"name" : "helloworld",
														"labels" : {
															"app" : "helloworld",
															"by" : "John_Doe",
															"from" : "Company"
														}
													},
													"spec" : {
														"containers" : [
															{
																"name" : "hello",
																"image" : "skante/helloworld",
																"ports" : [
																	{
																		"name" : "http",
																		"containerPort" : 3000
																	}
																]
															}
														]
													}
												},
												{
													"apiVersion" : "v1",
													"kind" : "Service",
													"metadata" : {
														"name" : "helloworld"
													},
													"spec" : {
														"selector" : {
															"app" : "helloworld",
															"by" : "John_Doe",
															"from" : "Company"
														},
														"type" : "NodePort",
														"ports" : [
															{
															 "port" : 3000
															}
														]
													}
												}
											]
										}
									} 
								</code>
							</p>
						</p>
					</p>
	            </div>
			</div>
		</div>

        


        <% include partials/footer %>
        
        <% include docs/script %>
    </body>
</html>



