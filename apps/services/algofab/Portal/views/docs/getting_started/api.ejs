<% var content = `
		<h3> REST API </h3>
		<p>
			In this section we will use NodeJS with its powerful module “Express” to create an HTTP Server wrapped around “hello.sh” script to handle all incoming execution requests. <br>
			But before we can develop anything, let’s visualize the API we want the server to work according to. The tables 1 and  2 represent our views of the application.
		</p>


		<div style="margin: 1em">
			<div class="row">
				<table class="table table-bordered api-table">
	              	<thead>
	                	<tr>
		                  	<th colspan="8"> URI : / </th>
		                </tr>
		                <tr>
		                  	<th rowspan="2"> Verb </th>
		                  	<th colspan="2"> Query </th>
		                  	<th colspan="2"> Body </th>
		                  	<th rowspan="2"> Invocation </th>
		                  	<th colspan="2"> Response </th>
		                </tr>
						<tr>
		                  	<th> Name </th>
		                  	<th> Importance </th>
		                  	<th> Name </th>
		                  	<th> Importance </th>
		                  	<th> Type </th>
		                  	<th> Content </th>
		                </tr>
	              	</thead>
	              	<tbody>
	              		<tr>
		                  	<td rowspan="3"> GET </td>
		                  	<td> firstname </td>
		                  	<td> required </td>
		                  	<td rowspan="3" colspan="2"> X </td>
		                  	<td rowspan="6"> bash hello.sh -f=firsnatme -l=lastname </td>
		                  	<td rowspan="6"> application/{outformat} </td>
							<td rowspan="6"> “Hello {firstname} {lastname}” </td>
		                </tr>
	              		<tr>
		                  	<td> lastname </td>
		                  	<td> optional </td>
		                </tr>
		                <tr>
		                  	<td> outformat </td>
		                  	<td> optional </td>
		                </tr>
	              		<!-- POST -->

	              		<tr>
		                  	<td rowspan="3"> POST </td>
		                  	<td rowspan="2" colspan="2"> X </td>

		                  	<td> firstname </td>
		                  	<td> required </td>

		                  	
		                </tr>
	              		<tr>
		                  	<td> lastname </td>
		                  	<td> optional </td>
		                </tr>
		                <tr>
		                  	<td> outformat </td>
		                  	<td> optional </td>
		                  	<td colspan="2"> X </td>
		                </tr>
	              	</tbody>
	            </table>
	            <div style="text-align: center; margin: 1em">
	        		Tab 1 : REST API for URI "/"
	        	</div>
	        </div>
	        <hr>
	        <div class="row">
				<table class="table table-bordered api-table">
	              	<thead>
	                	<tr>
		                  	<th colspan="8"> URI : /{daytime} </th>
		                </tr>
		                <tr>
		                  	<th rowspan="2"> Verb </th>
		                  	<th colspan="2"> Query </th>
		                  	<th colspan="2"> Body </th>
		                  	<th rowspan="2"> Invocation </th>
		                  	<th colspan="2"> Response </th>
		                </tr>
						<tr>
		                  	<th> Name </th>
		                  	<th> Importance </th>
		                  	<th> Name </th>
		                  	<th> Importance </th>
		                  	<th> Type </th>
		                  	<th> Content </th>
		                </tr>
	              	</thead>
	              	<tbody>
	              		<tr>
		                  	<td rowspan="3"> GET </td>
		                  	<td> firstname </td>
		                  	<td> required </td>
		                  	<td rowspan="3" colspan="2"> X </td>
		                  	<td rowspan="6"> bash hello.sh -f=firsnatme -l=lastname -t=daytime </td>
		                  	<td rowspan="6"> application/{outformat} </td>
							<td rowspan="6"> “Good {daytime} {firstname} {lastname}” </td>
		                </tr>
	              		<tr>
		                  	<td> lastname </td>
		                  	<td> optional </td>
		                </tr>
		                <tr>
		                  	<td> outformat </td>
		                  	<td> optional </td>
		                </tr>
	              		
		                <!-- POST -->

	              		<tr>
		                  	<td rowspan="3"> POST </td>
		                  	<td rowspan="2" colspan="2"> X </td>

		                  	<td> firstname </td>
		                  	<td> required </td>

		                  	
		                </tr>
	              		<tr>
		                  	<td> lastname </td>
		                  	<td> optional </td>
		                </tr>
		                <tr>
		                  	<td> outformat </td>
		                  	<td> optional </td>
		                  	<td colspan="2"> X </td>
		                </tr>
	              	</tbody>
	            </table>
	            <div style="text-align: center; margin: 1em">
	        		Tab 2 : REST API for URI "/{daytime}"
	        	</div>
	        </div>
	    </div>
	    <h4>Explanations</h4>
	    <p>
			The two tables, Tab 1 and Tab 2, represent respectively the API for relative URLs “/” and “/{daytime}”. <br>
			We chose to express DAYTIME in a template URL. As described <a href="/docs/getting-started/algo#algo-principle">previously</a> If DAYTIME is specified, the algorithm  should respond with “Good $DAYTIME $FIRSTNAME $LASTNAME” otherwise it responds with “Hello $FIRSTNAME $LASTNAME”. Therefore Tab 1 shows our server's (yet to be conceived) behavior when no DYATIME parameter was specified whereas Tab 2 portrays its behavior when DAYTIME is specified.
		</p>
		<p>
			The column Verbs refers to the HTTP method, Query refers to the query parameters of the request, Body is the body parameters of the request, Invocation is the way we call our algorithm  (how we spawn the hello.sh) to get its response, Response type is the type of data (HTTP content-type) we return and Response content is the actual content we return.
		</p>
		<p>
			When developing your algorithm there is one thing you should keep in mind : duality of modes. What we mean by that is that your server has to have two serving mode : the mode <a href="#">Demo</a> for demonstration / presentation of your algorithm and the mode <a href="#">Execution</a> that will be used for clients needing to get the output of your algorithm in their own applications (those built an application using the expertise of your algorithm). However to make the latter case possible we need the developer to make it possible for the user to get the output of his in a particular format (XML, JSON, YAML ...), then the client can parse it and use it in his own application. <br>
			To sum it up, your API Server should be able to return HTML content (for mode Demo) as well as other structure formats (for Execution mode).
		</p>
		<p>	 
			With HelloWorld, we created an option to allow users to get their result in one of the following formats : xml, json or html (by default). This option is specified with the query parameter “outformat”. However we made this an optional parameter so as not to bother users, thus the Server returns an html page by default. <br>
			The "outformat" parameters allows us, with the same server to serve in both Demo mode and Execution mode.  
		</p>

		<p class="alert alert-info">
			Important :  Although there are other ways solve the problem of modes duality (for example two servers, one for each mode), however we decided to make it a standard to use a query parameter because of two primary reasons: 
			<ul>
				<li>If applied this convention will ease up the adaptation for users when they are using many algorithms at the time.</li>
				<li>There is supposed to be only one API Server to you application and it will serve as an entrypoint to your algorithm infrastructure. The API Server is supposed to be the only front-end to your application. Consequently the two servers alternative (one for each mode) is not supported</li>
			</ul>
			Therefore the parameter "outformat" is highly reommended.
		</p>
		<p class="alert alert-info">
			Important : be aware that the algorithm's Demo should be available when a GET request is made to the API Server. The reason for that is because whenever a user asks about your Demo, the portal retrieves it always in the same manner : sending a GET to the home URL (GET /), so make sure you Demo is available Here. That should not pose any problem since we decided that the default value for outformat is html, if we want the algorithm to reason in execution mode, we just add ?outformat=xml to the url.
		</p>
		<p class="alert alert-warning">
			Warning : If your Demo is not at "GET /", users won't be able to see your Demo and if you don't give the possibility for your users to get their results in one or more format (different from HTML), your subscribers might have hard time using your algorithm's outputs (Execution mode) inside their applications.  
		</p>

		<p> 
			Note that we made the first name required but not last name, that is a choice me made to make sure that at least one of the two is given before we call the algorithm. We decided to handle this error case from the API Server though we could have just called the algorithm and return an error 500 if script replies with “Error : At least one name required”.
		</p>
		<p>
			For the error cases, we list the following :
			<ul>
				<li>
					“outformat” is given but not in [‘html’, ‘json’, ‘xml’] : we return status code 500 with : “content-type specified not understood”
				</li> 
				<li>
					FIRSTNAME is not specified : we return status code 500 with : “Firstname is required”
				</li> 
				<li>
					The value of DAYTIME is not in [“morning”, ‘evening’, “night”] : we return status code 500 with : “daytime should either be ‘morning’, ‘evening’ or ‘night’”.
				</li>
			</ul>

		</p>
		<p>
			As you may have guessed it, those are totally arbitrary conditions.
		</p>
		<h4> Code : </h4>
		<p>
			The code of our server (written in Nodejs) working according to the API we just described is below .
			<a href="/docs/getting-started/Hello-World-Package.zip" download><div id="api-code" style="text-align: center; font-size: 2em; font-weight: bold; padding: 1em; border-radius: 5px; border: 2px dotted black"> Download Code </div> </a>
			To test the server, extract the archive change directory to "Hello-World-Package/Hello-World" and run <code>npm install</code>, then <code>node app.js</code>. <br>
			Have fun testing :)
		</p>
	`
%>

<% include ../base %>
