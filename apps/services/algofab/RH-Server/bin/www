#!/usr/bin/nodejs

/*
const cluster = require('cluster');
const numCPUs = 1;

process.env["NODE_TLS_REJECT_UNAUTHORIZED"] = 0;

global.algofab_server = "IM";

//global.utils = require('../utils');

var all_params = require('../../config');

global.socket = require('../socket');




var debug = require('debug')('my-application');

//var SUPERGLOBALS = require("../config");


if (cluster.isMaster) {
	console.log(`Master ${process.pid} is running`);

	// Fork workers.
	for (let i = 0; i < numCPUs; i++) {
		cluster.fork();
	}

	cluster.on('exit', (worker, code, signal) => {
		console.log(`worker ${worker.process.pid} died`);
	});

	console.log(String.raw`
		    ___     __        ______   ______   ______    ___     ______    
		   / _ \    | |      |  ____| |  __  | | _____|  / _ \    |  _  \   ${global.CLOUD}
		  / / \ \   | |      | | ____ | |  | | | |__    / / \ \   | |_/ /   
		 / /---\ \  | |____  | |__| | | |__| | |  __|  / /---\ \  | |_\ \   
		/_/     \_\ |______| |______| |______| |_|    /_/     \_\ |_____/   ${global.algofab_server}

	`);
} else {
	// Workers can share any TCP connection
	// In this case it is an HTTP server
	

	console.log(`Worker ${process.pid} running`);
	var http = require('http');

	var app = require('../app'); //(global, MongoStore);

	var port = global.settings.IM_PORT, onListen = function(){
        debug('Express server listening on port ' + port);
    };

    var server = http.createServer(app).listen(port, onListen);

	var s = global.socket(server);

	server.timeout = global.settings.SERVERS_TIMEOUT;

	//var s = SUPERGLOBALS.socket(server, main.store);
	//SUPERGLOBALS.io = require('socket.io')(server);

	
	console.log(`Worker ${process.pid} started`);
}

*/




//#########################################################################"""""
const cluster = require('cluster');
const http = require('http');
const numCPUs = require('os').cpus().length;
var all_params = require('../../config');

var debug = require('debug')('my-application');
if (cluster.isMaster) {
	console.log(`Master ${process.pid} is running`);

	// Fork workers.
	for (let i = 0; i < numCPUs; i++) {
		cluster.fork();
	}

	cluster.on('exit', (worker, code, signal) => {
		console.log(`worker ${worker.process.pid} died`);
	});
} else {
	// Workers can share any TCP connection
	// In this case it is an HTTP server
	var w = require('../app');

	var port = process.env.PORT || w.CONFIG.params.RH_PORT, onListen = function(){
	    debug('Express server listening on port ' + port);
	} ;

	var server = (!w.CONFIG.params.CLOUD.startsWith('TERALAB'))? 
	                https.createServer(w.CONFIG.certs, w.app).listen(port, onListen) :
	                    require('http').createServer(w.app).listen(port, onListen);

	server.timeout = w.CONFIG.params.SERVERS_TIMEOUT;

	console.log("CONFIG.params.SERVERS_TIMEOUT : "+w.CONFIG.params.SERVERS_TIMEOUT);
	console.log(`Worker ${process.pid} started`);
}



